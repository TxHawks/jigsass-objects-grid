// *************************************
//
// # jigsass-objects-grid Config
// -> Configuration variables
//
////
/// @group Grid - 01 - Grid container
////
//
// *************************************

@charset 'UTF-8';

// -------------------------------------
// Dependencies
// -------------------------------------

@if (not function-exists(jigsass-get)) {
  @error '`jigsass-objects-grid` has a dependency on `jigsass-tools-maps. Please import it.'
}
@if (not mixin-exists(jigsass-mq)) {
  @error '`jigsass-objects-grid` has a dependency on `jigsass-tools-mq. Please import it.'
}
@if (not function-exists(jigsass-rhythm)) {
  @error '`jigsass-objects-grid` has a dependency on `jigsass-tools-typography`. Please import it.'
}
@if (not mixin-exists(jigsass-bidi)) {
  @error '`jigsass-objects-grid` has a dependency on `jigsass-tools-bidi`. Please import it.'
}
@if (not mixin-exists(jigsass-define-object)) {
  @error '`jigsass-objects-grid` has a dependency on `jigsass-tools-selectors. Please import it.'
}





// -------------------------------------
// Functions
// -------------------------------------

//





// -------------------------------------
// Mixins
// -------------------------------------

// stylelint-disable
/* ---
section: Grid
title: Grid container mixin
order: 2
---
```scss
@mixin jigsass-grid($modifier: false, $from: false, $until: false, $misc: false) { ... }
```

#### Description
Generate a grid-container class or modifier, which can be responsive (i.e., limited to
certain breakpoint defined in [$jigsass-breakpoints](https://txhawks.github.io/jigsass-tools-mq/#variable-jigsass-breakpoints)).

#### Parameters
Name | Description | Type | Default Value
--- | --- | --- | ---
`$modifier` | A grid-container modifier, e.g., `equal-height` | `String` or `Boolean` | false
`$from` | The name of breakpoint used as the min-width condition | `String` or `Boolean` | false
`$until` | The name of breakpoint used as the max-width condition | `String` or `Boolean` | false
`$misc` | The name of a miscellaneous media query condition | `String` or `Boolean` | false

#### Example
```scss
@include jigsass-grid($modifier: center, $from: small, $until: large, $misc: landscape) { ... }
```
Will Generate:
```css
@media (min-width: 30em) and (max-width: 63.99em) and (orientation: landscape) {
 .o-grid--center--from-small-until-large-when-landscape { ... }
}
```
*/
// stylelint-enable

/// Generate a grid-container class or modifier, which can be
/// responsive (i.e., limited to a certain media-query)
/// ---
/// @param {String | Boolean} $modifier
///   A grid-container modifier, e.g., `equal-height`
/// @param {String | Boolean} $from
///   The name of breakpoint used as the min-width condition.
/// @param {String | Boolean} $until
///   The name of breakpoint used as the max-width condition.
/// @param {String | Boolean} $misc
///   The name of a miscellaneous media query condition.
/// ---
@mixin jigsass-grid($modifier: false, $from: false, $until: false, $misc: false) {
  @if (not mixin-exists(jigsass-object)) {
    @error '`jigsass-objects-grid` has a dependency on `jigsass-tools-selectors. Please import it.'
  }

  @include jigsass-object($jigsass-grid-class, $from, $until, $misc, $modifier)
}





// -------------------------------------
// Private Helper Mixins
// -------------------------------------

/// Outputs fallback styles for grid containers when flexbox isn't available
/// and falling back to `display: inline-block` grid items is required.
/// ---
/// 1. Ensures consistent default alignment of items.
/// 2. An attempt to remove whitespace between `display: inline-block`
///    grid item elements.
///    Works with all non-monospaced fonts. When using a monospace font-face
///    as your base font, set the grid container's font-family to `sans-serif`
///    and re-apply your default font to grid items.
///    alternatively, comment out whitespace between grid items.
/// 3. Fixes WebKit bug.
/// ---
@mixin _jigsass-grid-flaxbox-fallback-styles() {
  @if (not mixin-exists(jigsass-bidi)) {
    @error '`jigsass-objects-grid` has a dependency on `jigsass-tools-bidi`. Please import it.'
  }
  @include jigsass-bidi(text-align, start); // [1]
  display: block;
  letter-spacing: -0.31em;  // [2]
  text-rendering: optimizespeed; // [3]

  // Old-Opera hack
  opera:-o-prefocus &,
  & {
    word-spacing: -.043em;  // [3]
  }
}





// -------------------------------------
// Definitions
// -------------------------------------

@include jigsass-define-object($jigsass-grid-class) {
  // Add namespace to class names
  $_ns: if($jigsass-namespace == '', '', #{$jigsass-namespace}-);
  $_grid-class: #{$_ns}#{$jigsass-grid-class};
  $_item-class: #{$_ns}#{$jigsass-grid-item-class};

  // Grid container
  // ---
  // 1. Allows lists to be grids.
  // 2. Negative margins to compensate for first and last columns' gutter
  // 3. Apply default column gutter.
  //    Targets direct descendants using the universal selector
  //    instead of actual grid items in order to keep
  //    specificity low. This works, as only grid items are
  //    legitimate children of grid containers.
  // 4. Align grid items to top by default.
  // ---
  @include jigsass-classname() {
    @include jigsass-bidi(margin-start, -1 * jigsass-rhythm($jigsass-grid-default-gutter)); // [1]
    list-style: none; // [1]
    margin-left: jigsass-rhythm($jigsass-grid-default-gutter) / -2; // [2]
    margin-right: jigsass-rhythm($jigsass-grid-default-gutter) / -2; // [2]

    @if ($jigsass-grid-flexbox) {
      display: flex;
      flex: 0 1 auto;
      flex-direction: row;
      flex-wrap: wrap;

      & > * {
        padding-left: jigsass-rhythm($jigsass-grid-default-gutter) / 2; // [3]
        padding-right: jigsass-rhythm($jigsass-grid-default-gutter) / 2; // [3]
        vertical-align: top;
      }

      @if ($jigsass-grid-flexbox-fallback) {
        // Use the defined qualifier selector for flexbox fallback
        // (e.g., when using modernizer).
        .#{$jigsass-grid-flexbox-fallback} & {
          @include _jigsass-grid-flaxbox-fallback-styles;
        }
      }
    }
    @else {
      @include _jigsass-grid-flaxbox-fallback-styles;
    }
    $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}
  order: 0
  ---
  Any HTML element (including lists) may serve as a grid container,
  however, grid containers may contain no other elements other than
  grid items.

  A grid element has negative margins the length of half a gutter at its left and right,
  to compensate of the first and last column's gutter and ease calculations.

  Unless `#{$_item-class}`s are given a width modifier class,
  all grid items will be equally distributed along a single row.


  #### include with:
  ```scss
  @include jigsass-grid([$modifier, $from, $until, $misc]);
  ```


  #### Related variables:

  - `$jigsass-grid-class` (default: `grid`): Determines the class-name used
    for grid containers.
  - `$jigsass-grid-flexbox` (default: `true`): Determines whether to use flexbox or not.
  - `$jigsass-grid-flexbox-fallback` (default: `no-flaxwrap`): Determines if to include a
    flexbox fallback and the qualifier class to use if so (e.g, `.no-flexwrap`
    when using Modernizr defaults). Set to `false` to disable fallback altogether,
    and to a class-name (sans the leading `.`) used as the qualifier class if fallback
    is desirable.
  - `$jigsass-grid-default-gutter` (default: `4`): A unitless number used to determine number of
    base rhythm units (as defined in `$jigsass-sizes.rhythm-unit`) to use as gutter length
    between grid items in the default grid container.



  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class}'>
    <!-- first row -->
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo'> 1 of 3 </div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo'> 1 of 3 </div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo'> 1 of 3 </div>
    </div>
    <!-- second row -->
    <div class='#{$_item-class}'>
      <div class='fpo'>auto-sized</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>auto-sized</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid();
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  // When `$jigsass-grid-flexbox` is enabled
  .#{$_grid-class} {
    display: flexbox;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    list-style: none;
    margin-left: -2rem;
    margin-right: -2rem;
  }

  // Targets direct descendants using the universal selector
  // instead of actual grid items in order to keep
  // specificity low. This works, as only grid items are
  // legitimate children of grid containers.
  .#{$_grid-class} > * {
    padding-left: 2rem;
    padding-right: 2rem;
  }

  // When `$jigsass-grid-flexbox-fallback` is set to `no-flexwrap`
  .no-flexwrap .#{$_grid-class} {
    display: block;
    letter-spacing: -.043em;
    text-align: (left|right);
  }

  // When `$jigsass-grid-flexbox` is disabled
  .#{$_grid-class} {
    display: block;
    letter-spacing: -.043em;
    list-style: none;
    margin-left: -2rem;
    margin-right: -2rem;
    text-align: (left|right);
  }
  .#{$_grid-class} > * {
    padding-left: 2rem;
    padding-right: 2rem;
  }

  ```
  */
      // stylelint-enable
      $_doclet-store: append($_doclet-store, $_doclet) !global;
    }
  }





  // -------------------------------------
  // Horizontal Alignment Modifiers
  // -------------------------------------

  // Align items to grid-container's horizontal start
  // ---
  @include jigsass-classname($modifier: start) {
    // When flexbox is enabled
    @if ($jigsass-grid-flexbox) {
      justify-content: flex-start;

      // When support for flexbox fallback is needed
      @if ($jigsass-grid-flexbox-fallback) {
        .#{$jigsass-grid-flexbox-fallback} & {
          @include jigsass-bidi(text-align, start);
        }
      }
    }

    // When flexbox is disabled
    @else {
      @include jigsass-bidi(text-align, start);
    }

    $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--start
  order: 1
  ---
  Aligns grid items to horizontal start of the grid container.


  #### include with:
  ```scss
  @include jigsass-grid($modifier: start[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--start'>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>1 of 4</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>1 of 4</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--8-of-12'>
      <div class='fpo'>2 of 3</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--10-of-12'>
      <div class='fpo'>5 of 6</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--12-of-12'>
      <div class='fpo'>1 of 1</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(start);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  // When `$jigsass-grid-flexbox` is enabled
  .#{$_grid-class}--start {
    justify-content: flex-start;
  }

  // When `$jigsass-grid-flexbox-fallback` is set to `no-flexwrap`
  .no-flexwrap .#{$_grid-class}--start {
    text-align: (left|right);
}

  // When `$jigsass-grid-flexbox` is disabled
  .#{$_grid-class}--start {
    text-align: (left|right);
  }

  ```
  */
      // stylelint-enable
      $_doclet-store: append($_doclet-store, $_doclet) !global;
    }
  }

  // Align items to grid-container's horizontal center
  // ---
  // 1. Reset text alignment.
  // ---
  @include jigsass-classname($modifier: center) {
    // When flexbox is enabled
    @if ($jigsass-grid-flexbox) {
      justify-content: center;

      // When support for flexbox fallback is needed
      @if ($jigsass-grid-flexbox-fallback) {
        .#{$jigsass-grid-flexbox-fallback} & {
          text-align: center;
        }
      }

    }

    // When flexbox is disabled
    @else {
      text-align: center;
    }

    $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--center
  order: 2
  ---
  Aligns grid items to horizontal center of the grid container.


  #### include with:
  ```scss
  @include jigsass-grid($modifier: center[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--center'>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>1 of 4</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>1 of 4</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--8-of-12'>
      <div class='fpo'>2 of 3</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--10-of-12'>
      <div class='fpo'>5 of 6</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--12-of-12'>
      <div class='fpo'>1 of 1</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(center);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  // When `$jigsass-grid-flexbox` is enabled
  .#{$_grid-class}--center {
    justify-content: center;
  }

  // When `$jigsass-grid-flexbox-fallback` is set to `no-flexwrap`
  .no-flexwrap .#{$_grid-class}--center {
    text-align: center;
  }

  // When `$jigsass-grid-flexbox` is disabled
  .#{$_grid-class}--center {
    text-align: center;
  }
  ```
  */
      // stylelint-enable
      $_doclet-store: append($_doclet-store, $_doclet) !global;
    }
  }

  // Align items to grid-container's horizontal end
  // ---
  // 1. Reset text alignment.
  // ---
  @include jigsass-classname($modifier: end) {
    // When flexbox is enabled
    @if ($jigsass-grid-flexbox) {
      justify-content: flex-end;

      // When support for flexbox fallback is needed
      @if ($jigsass-grid-flexbox-fallback) {
        .#{$jigsass-grid-flexbox-fallback} & {
          @include jigsass-bidi(text-align, end);
        }
      }

    }

    // When flexbox is disabled
    @else {
      @include jigsass-bidi(text-align, end);
    }

    $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--end
  order: 3
  ---
  Aligns grid items to horizontal end of the grid container.


  #### include with:
  ```scss
  @include jigsass-grid($modifier: end[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--end'>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>1 of 4</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>1 of 4</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--8-of-12'>
      <div class='fpo'>2 of 3</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--10-of-12'>
      <div class='fpo'>5 of 6</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--12-of-12'>
      <div class='fpo'>1 of 1</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(end);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  // When `$jigsass-grid-flexbox` is enabled
  .#{$_grid-class}--end {
    justify-content: flex-end;
  }

  // When `$jigsass-grid-flexbox-fallback` is set to `no-flexwrap`
  .no-flexwrap .#{$_grid-class}--end {
    text-align: (left|right);
  }
  // When `$jigsass-grid-flexbox` is disabled
  .#{$_grid-class}--end {
    text-align: (left|right);
  }
  ```
  */
      // stylelint-enable
      $_doclet-store: append($_doclet-store, $_doclet) !global;
    }
  }

  // Reverse the display order grid items
  // ---
  // 1. Reverse the `direction` when not using flexbox, so that items are drawn
  //    opposite to the document's general direction.
  // 2. Reset the direction of grid items when not using flexbox
  // ---
  @include jigsass-classname($modifier: rev) {
    // When flexbox is enabled
    @if ($jigsass-grid-flexbox) {
      flex-direction: row-reverse;

      // When support for flexbox fallback is needed
      @if ($jigsass-grid-flexbox-fallback) {
        .#{$jigsass-grid-flexbox-fallback} & {
          @include jigsass-bidi(direction, ets);  // [1]

          > .#{$_item-class} {
            @include jigsass-bidi(direction, ste);  // [2]
          }
        }
      }
    }

    // When flexbox is disabled
    @else {
      @include jigsass-bidi(direction, ets);  // [1]

      > .#{$_item-class} {
        @include jigsass-bidi(direction, ste);  // [2]
      }
    }

    $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--rev
  order: 4
  ---
  Reversed grid.

  items 1, 2, 3, 4 in the markup will be visually displayed in 4, 3, 2, 1 order.


  #### include with:
  ```scss
  @include jigsass-grid($modifier: rev[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--rev'>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 1</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 2</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 3</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 4</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(rev);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  // When `$jigsass-grid-flexbox` is enabled
  .#{$_grid-class}--rev {
    flex-direction: row-reverse;
  }

  // When `$jigsass-grid-flexbox-fallback` is set to `no-flexwrap`
  .no-flexwrap .#{$_grid-class}--start {
    direction: (rtl|ltr);
  }

  .no-flexwrap .#{$_grid-class}--rev > .#{$_item-class} {
    direction: (rtl|ltr); // Opposite of the above
  }

  // When `$jigsass-grid-flexbox` is disabled
  .#{$_grid-class}--start {
    direction: (rtl|ltr);
  }

  .#{$_grid-class}--rev > .#{$_item-class} {
    direction: (rtl|ltr); // Opposite of the above
  }

  ```
  */
      // stylelint-enable
      $_doclet-store: append($_doclet-store, $_doclet) !global;
    }
  }





  // -------------------------------------
  // Vertical Alignment Modifiers
  // -------------------------------------

  // Equal height grid cells
  // ---
  // Only available with flexbox
  @if ($jigsass-grid-flexbox) {

    @include jigsass-classname($modifier: equal-height) {
      > .#{$_item-class} {
        display: flex;
      }

      $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
      @if (not index($_doclet-store, $_doclet)) {
        // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--equal-height
  order: 5
  ---
  Stretch all grid items on a single row to the height of the tallest grid item.

  Only works with flexbox, no fallback available.


  #### include with:
  ```scss
  @include jigsass-grid($modifier: equal-height[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--equal-height'>
    <!-- first row -->
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo'>
        1 of 3<br />
        Stretches to fill height by default, despite its content not filling the space
      </div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo'>
        1 of 3<br />
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum mollis
        velit non gravida venenatis. Praesent consequat lectus purus, ut scelerisque
        velit condimentum eu.
      </div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo'>
        1 of 3<br />
        Stretches to fill height by default, despite its content not filling the space
      </div>
    </div>
    <!-- second row -->
    <div class='#{$_item-class}'>
      <div class='fpo'>auto-sized</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>auto-sized</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(equal-height);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  // When `$jigsass-grid-flexbox` is enabled
  .#{$_grid-class}--equal-height > #{$_item-class} {
    display: flex;
  }

  ```
  */
        // stylelint-enable
        $_doclet-store: append($_doclet-store, $_doclet) !global;
      }
    }
  }


  // Top-aligned grid-cells
  // ---
  @include jigsass-classname($modifier: top) {
    align-items: flex-start;

    > .#{$_item-class} {
      verticle-align: top;
    }

    $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--top
  order: 6
  ---
  Top aligned grid items


  #### include with:
  ```scss
  @include jigsass-grid($modifier: top[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--top'>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 1</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 2</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo fpo--tall'>Item 3</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 4</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 5</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(top);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  .#{$_grid-class}--top {
    align-items: flex-start;
  }

  .#{$_grid-class}--top > * {
    vertical-align: top;
  }
  ```
  */
      // stylelint-enable
      $_doclet-store: append($_doclet-store, $_doclet) !global;
    }
  }

  // Middle-alligned grid-cells
  // ---
  @include jigsass-classname($modifier: middle) {
    align-items: center;

    > * {
      verticle-align: middle;
    }

    $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--middle
  order: 7
  ---
  Middle aligned grid items


  #### include with:
  ```scss
  @include jigsass-grid($modifier: middle[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--middle'>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 1</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 2</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo fpo--tall'>Item 3</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 4</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 5</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(middle);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  .#{$_grid-class}--middle {
    align-items: center;
  }

  .#{$_grid-class}--middle >  * {
    vertical-align: middle;
  }

  ```
  */
      // stylelint-enable
      $_doclet-store: append($_doclet-store, $_doclet) !global;
    }
  }


  // Bottom-alligned grid-cells
  // ---
  @include jigsass-classname($modifier: bottom) {
    align-items: flex-end;

    > * {
      verticle-align: bottom;
    }

    $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--bottom
  order: 8
  ---
  Bottom aligned grid items


  #### include with:
  ```scss
  @include jigsass-grid($modifier: bottom[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--bottom'>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 1</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 2</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo fpo--tall'>Item 3</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 4</div>
    </div>
    <div class='#{$_item-class}'>
      <div class='fpo'>Item 5</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(bottom);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  .#{$_grid-class}--bottom {
    align-items: flex-end;
  }

  .#{$_grid-class}--bottom > * {
    vertical-align: bottom;
  }

  ```
  */
      // stylelint-enable
      $_doclet-store: append($_doclet-store, $_doclet) !global;
    }
  }





  // -------------------------------------
  // Horizontal Distribution Modifiers
  // -------------------------------------

  // Equally distributed grid items
  //
  // Only available when flexbox is enabled
  // ---
  @if ($jigsass-grid-flexbox) {
    @include jigsass-classname($modifier: space-between) {
      justify-content: space-between;

      $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
      @if (not index($_doclet-store, $_doclet)) {
        // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--space-between
  order: 9
  ---
  Distribute grid items equally across the main flex axis.

  ** Use with care. Only available with flexbox. No fallback. **


  #### include with:
  ```scss
  @include jigsass-grid($modifier: space-between[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--space-between'>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>Item 1</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>Item 2</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--3-of-12'>
      <div class='fpo'>Item 3</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(space-between);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  // When `$jigsass-grid-flexbox` is enabled
  .#{$_grid-class}--space-between {
    justify-content: space-between
  }
  ```
  */
        // stylelint-enable
        $_doclet-store: append($_doclet-store, $_doclet) !global;
      }
    }
  }

  // Equally distribute space around grid items
  //
  // Only available when flexbox is enabled
  // ---
  @if ($jigsass-grid-flexbox) {
    @include jigsass-classname($modifier: space-around) {
      justify-content: space-around;

      $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
      @if (not index($_doclet-store, $_doclet)) {
        // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--space-around
  order: 10
  ---
  Equally distribute space around grid items across the main flex axis, meaning,
  including before the first item and after the last.

  ** Use with care. Only available with flexbox. No fallback. **


  #### include with:
  ```scss
  @include jigsass-grid($modifier: space-around[, $from, $until, $misc]);
  ```


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--space-around'>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo'>Item 1</div>
    </div>
    <div class='#{$_item-class} #{$_item-class}--4-of-12'>
      <div class='fpo'>Item 2</div>
    </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(space-around);
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  // When `$jigsass-grid-flexbox` is enabled
  .#{$_grid-class}--space-around {
    justify-content: space-around
  }
  ```
  */
        // stylelint-enable
        $_doclet-store: append($_doclet-store, $_doclet) !global;
      }
    }
  }





  // -------------------------------------
  // Gutter Width Modifiers
  // -------------------------------------

  @each $gutter-modifier, $gutter-spacing in $jigsass-grid-gutter-modifiers {
    @if (unitless($gutter-spacing)) {
      $_is-unitless: true;
      $_gutter: jigsass-rhythm($gutter-spacing);
      $_width-description: unquote('that of #{$gutter-spacing} base rhythm units')
    }
    @else {
      $_is-unitless: false;
      $_gutter: jigsass-convert-length($gutter-spacing);
      $_width-description: unquote('#{$gutter-spacing}')
    }

    // 1. Modify gutter widths.
    //    Targets direct descendants using the universal selector
    //    instead of actual grid items in order to keep
    //    specificity low. This works, as only grid items are
    //    legitimate children of grid containers.
    @include jigsass-classname($modifier: #{$gutter-modifier}) {
      margin-left: $_gutter / -2;
      margin-right: $_gutter / -2;

      & > * {  // [1]
        padding-left: $_gutter / 2;
        padding-right: $_gutter / 2;
      }

      $_doclet: $jigsass-obj-current-name + ($jigsass-obj-current-modifier or '');
      @if (not index($_doclet-store, $_doclet)) {
        // stylelint-disable
  /* ---
  section: Grid Container
  title: #{$_grid-class}--#{$gutter-modifier}
  order: 11
  ---
  Modify the width of column gutters to #{$_width-description}


  #### include with:
  ```scss
  @include jigsass-grid($modifier: #{$gutter-modifier}[, $from, $until, $misc]);
  ```


  #### Related Variables:
  - `$jigsass-grid-gutter-modifiers`: Specifies the gutter-width modifiers that can be generated.
    A map of modifiers, where each key is a modifier's name and value is a unitless numbers
    denoting amounts of rhythm units to serve as gutter-width in each modifier.


  #### Related Mixins:
  [jigsass-grid](#grid-container-mixin): Generates a grid-container class or modifier,
  which can be responsive (i.e., limited to a certain media-query)


  #### Usage example:
  ```example:html
  <!-- In HTML -->
  <section class='#{$_grid-class} #{$_grid-class}--#{$gutter-modifier}'>
  <div class='#{$_item-class}'>
  <div class='fpo'>Item 1</div>
  </div>
  <div class='#{$_item-class}'>
  <div class='fpo'>Item 2</div>
  </div>
  <div class='#{$_item-class}'>
  <div class='fpo'>Item 3</div>
  </div>
  </section>
  ```

  ```scss
  // --- In Sass --- //
  @include jigsass-grid(#{$gutter-modifier});
  ```

  ** CSS output: **

  ```scss
  // --- CSS --- //
  .#{$_grid-class}--#{$gutter-modifier} {
    margin-left: #{$_gutter / -2};
    margin-right: #{$_gutter / -2};
  }

  // Targets direct descendants using the universal selector
  // instead of #{$_item-class} in order to keep
  // specificity low. This works, as only grid items are
  // legitimate children of #{$_grid-class}.
  .#{$_grid-class}--#{$gutter-modifier} > * {
    padding-left: #{$_gutter / 2};
    padding-right: #{$_gutter / 2};
  }
  ```
  */
        // stylelint-enable
        $_doclet-store: append($_doclet-store, $_doclet) !global;
      }
    }
  }
}
